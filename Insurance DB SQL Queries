CREATE TABLE Customers (
  customer_id INT PRIMARY KEY AUTO_INCREMENT,
  first_name VARCHAR(50),
  last_name  VARCHAR(50),
  age INT,
  city VARCHAR(50)
);
CREATE TABLE Policies (
  policy_id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT NOT NULL,
  policy_type VARCHAR(50),
  start_date DATE,
  premium DECIMAL(10,2),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);
CREATE TABLE Claims (
  claim_id INT PRIMARY KEY AUTO_INCREMENT,
  policy_id INT NOT NULL,
  claim_date DATE,
  claim_amount DECIMAL(10,2),
  claim_status VARCHAR(20),
  FOREIGN KEY (policy_id) REFERENCES Policies(policy_id)
);
INSERT INTO Customers (first_name,last_name,age,city) VALUES
('John','Doe',34,'Hartford'),
('Jane','Smith',29,'New Haven'),
('Michael','Brown',45,'Bridgeport'),
('Emily','Davis',31,'Stamford'),
('Daniel','Wilson',52,'Hartford');

INSERT INTO Policies (customer_id,policy_type,start_date,premium) VALUES
(1,'Auto','2023-01-15',1200.50),
(2,'Home','2023-03-10',980.75),
(3,'Auto','2022-12-01',1350.00),
(4,'Life','2023-06-20',500.00),
(5,'Auto','2023-02-11',1400.25);

INSERT INTO Claims (policy_id,claim_date,claim_amount,claim_status) VALUES
(1,'2023-05-02',2500.00,'Approved'),
(1,'2023-08-12',1800.00,'Pending'),
(2,'2023-04-15',5000.00,'Denied'),
(3,'2023-07-22',1200.00,'Approved'),
(5,'2023-09-01',3000.00,'Approved');


-- Beginner Queries

-- List all customers who live in Hartford.
SELECT *
FROM customers
WHERE city = 'Hartford';

-- Show all policies and their policy types.
SELECT policy_id, policy_type
FROM Policies;

-- Find all claims made in 2023.
SELECT *
FROM claims
WHERE claim_date BETWEEN "2023-01-01" AND "2023-12-31";

-- Show the names and ages of customers older than 40.
SELECT first_name,last_name,age
FROM customers
WHERE age > 40;

-- Count how many customers are stored in the database.
SELECT COUNT(*)
FROM customers;


-- Intermediate Queries

-- Find the average premium across all policies.
SELECT AVG(premium)
FROM Policies;

-- Count how many policies each customer holds.
SELECT customer_id, COUNT(policy_id) AS total_policies
FROM Policies
GROUP BY customer_id;

-- Show the top 3 largest claims (by claim amount).
SELECT claim_id, claim_amount
FROM Claims
ORDER BY claim_amount DESC
LIMIT 3;

-- List all customers who do not have any claims.
SELECT c.first_name, c.last_name
FROM Customers c
LEFT JOIN Policies p ON c.customer_id = p.customer_id
LEFT JOIN Claims cl ON p.policy_id = cl.policy_id
WHERE cl.claim_id IS NULL;

-- Find the total claim amount for each customer.
SELECT c.first_name, c.last_name, SUM(cl.claim_amount) AS total_claims
FROM Customers c
JOIN Policies p ON c.customer_id = p.customer_id
JOIN Claims cl ON p.policy_id = cl.policy_id
GROUP BY c.first_name, c.last_name;

-- Advanced Queries

-- Find the city with the highest total claim amount.
SELECT c.city, SUM(cl.claim_amount) AS total_claims
FROM Customers c
JOIN Policies p ON c.customer_id = p.customer_id
JOIN Claims cl ON p.policy_id = cl.policy_id
GROUP BY c.city
ORDER BY total_claims DESC
LIMIT 1;

-- Show customers who have more than one claim.
SELECT c.customer_id, COUNT(cl.claim_id) AS claim_count
FROM Customers c
JOIN Policies p ON c.customer_id = p.customer_id
JOIN Claims cl ON p.policy_id = cl.policy_id
GROUP BY c.customer_id
HAVING COUNT(cl.claim_id) > 1;

-- Find policies that have never had a claim filed.
SELECT p.policy_id
FROM Policies p
LEFT JOIN Claims cl ON p.policy_id = cl.policy_id
WHERE cl.claim_id IS NULL;
